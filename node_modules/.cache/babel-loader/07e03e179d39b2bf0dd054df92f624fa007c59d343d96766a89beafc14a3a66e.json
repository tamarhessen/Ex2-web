{"ast":null,"code":"var _jsxFileName = \"/home/gp/Ex2-web-1/src/feed/FeedScreen.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport MainScreen from './MainScreen';\nimport './LightModeFeed.css';\nimport './NightModeFeed.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FeedScreen({\n  displayName,\n  profilePicture\n}) {\n  _s();\n  const [mode, setMode] = useState(true);\n  const [imageBlob, setImageBlob] = useState(null);\n  useEffect(() => {\n    // Fetch the image if profilePicture is a URL\n    if (typeof profilePicture === 'string') {\n      fetch(profilePicture).then(response => response.blob()).then(blob => setImageBlob(blob)).catch(error => console.error('Error fetching image:', error));\n    } else if (profilePicture instanceof Blob) {\n      setImageBlob(profilePicture);\n    }\n  }, [profilePicture]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"title\", {\n      children: \"Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css\",\n      integrity: \"sha256-2TnSHycBDAm2wpZmgdi0z81kykGPJAkiUY+Wf97RbvY=\",\n      crossOrigin: \"anonymous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mode ? 'light-mode' : 'night-mode',\n      children: [imageBlob && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(imageBlob),\n        alt: \"Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(MainScreen, {\n        displayName: displayName,\n        userImg: \"abc\",\n        mode: mode,\n        setMode: setMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(FeedScreen, \"Ym7mAwVbK36Re4X1zksFUzKIO7I=\");\n_c = FeedScreen;\nexport default FeedScreen;\n\n// import React from 'react';\n// import { useLocation } from 'react-router-dom';\n\n// function FeedScreen() {\n//   const location = useLocation();\n//   const { state } = location;\n\n//   if (!state || !state.username || !state.profilePicture) {\n//     // Handle case where user details are not available\n//     return <div>Error: User details not found.</div>;\n//   }\n\n//   const { username, profilePicture } = state;\n\n//   // Use username and profilePicture as needed in your FeedScreen component\n//   return (\n//     <div>\n//       <h1>Welcome, {username}</h1>\n//       <img src={URL.createObjectURL(profilePicture)} alt=\"Profile\" />\n//       {/* Other feed screen content */}\n//     </div>\n//   );\n// }\n\n// export default FeedScreen;\nvar _c;\n$RefreshReg$(_c, \"FeedScreen\");","map":{"version":3,"names":["useState","useEffect","MainScreen","jsxDEV","_jsxDEV","Fragment","_Fragment","FeedScreen","displayName","profilePicture","_s","mode","setMode","imageBlob","setImageBlob","fetch","then","response","blob","catch","error","console","Blob","children","fileName","_jsxFileName","lineNumber","columnNumber","rel","href","integrity","crossOrigin","className","src","URL","createObjectURL","alt","userImg","_c","$RefreshReg$"],"sources":["/home/gp/Ex2-web-1/src/feed/FeedScreen.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport MainScreen from './MainScreen';\nimport './LightModeFeed.css';\nimport './NightModeFeed.css';\n\nfunction FeedScreen({ displayName, profilePicture }) {\n    const [mode, setMode] = useState(true);\n    const [imageBlob, setImageBlob] = useState(null);\n\n    useEffect(() => {\n        // Fetch the image if profilePicture is a URL\n        if (typeof profilePicture === 'string') {\n            fetch(profilePicture)\n                .then((response) => response.blob())\n                .then((blob) => setImageBlob(blob))\n                .catch((error) => console.error('Error fetching image:', error));\n        } else if (profilePicture instanceof Blob) {\n            setImageBlob(profilePicture);\n        }\n    }, [profilePicture]);\n\n    return (\n        <>\n            <title>Feed</title>\n            <link\n                rel=\"stylesheet\"\n                href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css\"\n                integrity=\"sha256-2TnSHycBDAm2wpZmgdi0z81kykGPJAkiUY+Wf97RbvY=\"\n                crossOrigin=\"anonymous\"\n            />\n            <div className={mode ? 'light-mode' : 'night-mode'}>\n                {imageBlob && <img src={URL.createObjectURL(imageBlob)} alt=\"Profile\" />}\n                <MainScreen displayName={displayName} userImg=\"abc\" mode={mode} setMode={setMode}></MainScreen>\n            </div>\n        </>\n    );\n}\n\nexport default FeedScreen;\n\n\n\n\n\n\n// import React from 'react';\n// import { useLocation } from 'react-router-dom';\n\n// function FeedScreen() {\n//   const location = useLocation();\n//   const { state } = location;\n\n//   if (!state || !state.username || !state.profilePicture) {\n//     // Handle case where user details are not available\n//     return <div>Error: User details not found.</div>;\n//   }\n\n//   const { username, profilePicture } = state;\n\n//   // Use username and profilePicture as needed in your FeedScreen component\n//   return (\n//     <div>\n//       <h1>Welcome, {username}</h1>\n//       <img src={URL.createObjectURL(profilePicture)} alt=\"Profile\" />\n//       {/* Other feed screen content */}\n//     </div>\n//   );\n// }\n\n// export default FeedScreen;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAO,qBAAqB;AAC5B,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7B,SAASC,UAAUA,CAAC;EAAEC,WAAW;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACZ;IACA,IAAI,OAAOQ,cAAc,KAAK,QAAQ,EAAE;MACpCM,KAAK,CAACN,cAAc,CAAC,CAChBO,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAKJ,YAAY,CAACI,IAAI,CAAC,CAAC,CAClCC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;IACxE,CAAC,MAAM,IAAIX,cAAc,YAAYa,IAAI,EAAE;MACvCR,YAAY,CAACL,cAAc,CAAC;IAChC;EACJ,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB,oBACIL,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACInB,OAAA;MAAAmB,QAAA,EAAO;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACnBvB,OAAA;MACIwB,GAAG,EAAC,YAAY;MAChBC,IAAI,EAAC,yEAAyE;MAC9EC,SAAS,EAAC,qDAAqD;MAC/DC,WAAW,EAAC;IAAW;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eACFvB,OAAA;MAAK4B,SAAS,EAAErB,IAAI,GAAG,YAAY,GAAG,YAAa;MAAAY,QAAA,GAC9CV,SAAS,iBAAIT,OAAA;QAAK6B,GAAG,EAAEC,GAAG,CAACC,eAAe,CAACtB,SAAS,CAAE;QAACuB,GAAG,EAAC;MAAS;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxEvB,OAAA,CAACF,UAAU;QAACM,WAAW,EAAEA,WAAY;QAAC6B,OAAO,EAAC,KAAK;QAAC1B,IAAI,EAAEA,IAAK;QAACC,OAAO,EAAEA;MAAQ;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9F,CAAC;EAAA,eACR,CAAC;AAEX;AAACjB,EAAA,CA/BQH,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAiCnB,eAAeA,UAAU;;AAOzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}